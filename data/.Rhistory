raw_data2[["Area/Skill"]] <- paste(raw_data2$areas, raw_data2$skills, sep = "/")
knitr::opts_chunk$set(echo = TRUE)
courses_raw <- read.csv("courses.csv")
dim(courses_raw)
names(courses_raw)
# Should be the same since the json query already had this condition
courses_raw <- courses_raw[courses_raw$credits == 1.0, ]
dim(courses_raw)
# Remove any courses with NULL values
courses_raw <- courses_raw[complete.cases(courses_raw), ]
dim(courses_raw)
# Remove any courses without a distribution skill OR area
courses_raw <- courses_raw[!(courses_raw$areas == "[]" & courses_raw$skills == "[]"), ]
dim(courses_raw)
# Go row by row to remove duplicate course codes, only keeping the first code
courses_raw$code_check <- NA
for (i in 1:nrow(courses_raw)) {
matches <- regexpr("(?<=')[^']+", courses_raw$all_course_codes[i], perl = TRUE)
courses_raw$code_check[i] <- regmatches(courses_raw$all_course_codes[i], matches)
}
courses_raw <- courses_raw[courses_raw$course_code == courses_raw$code_check, ]
courses_clean <- courses_raw[ ,-ncol(courses_raw)]
# Drop columns that are no longer necessary
courses_clean <- subset(courses_clean, select = -c(all_course_codes, credits, school))
# Check the number of unique course numbers and course ids to know if they can be used for querying the reviews
length(unique(courses_clean$crn))
length(unique(courses_clean$course_id))
dim(courses_clean)
# Relabel all the areas for readability
for (i in 1:nrow(courses_clean)) {
clean_str <- gsub("\\[|\\]|'", "", courses_clean$areas[i])
if (courses_clean$areas[i] != "[]") {
courses_clean$areas[i] <- clean_str
}
else {
courses_clean$areas[i] <- NA
}
}
# Relabel all the skills for readability
for (i in 1:nrow(courses_clean)) {
clean_str <- gsub("\\[|\\]|'", "", courses_clean$skills[i])
if (courses_clean$skills[i] != "[]") {
courses_clean$skills[i] <- clean_str
}
else {
courses_clean$skills[i] <- NA
}
}
# Combine areas and skills for cleaning
raw_data2[["Area/Skill"]] <- paste(raw_data2$areas, raw_data2$skills, sep = "/")
View(courses_clean)
# Relabel all the areas for readability
for (i in 1:nrow(courses_clean)) {
clean_str <- gsub("\\[|\\]|'", "", courses_clean$areas[i])
if (courses_clean$areas[i] != "[]") {
courses_clean$areas[i] <- clean_str
}
else {
courses_clean$areas[i] <- NA
}
}
knitr::opts_chunk$set(echo = TRUE)
courses_raw <- read.csv("courses.csv")
dim(courses_raw)
names(courses_raw)
# Should be the same since the json query already had this condition
courses_raw <- courses_raw[courses_raw$credits == 1.0, ]
dim(courses_raw)
# Remove any courses with NULL values
courses_raw <- courses_raw[complete.cases(courses_raw), ]
dim(courses_raw)
# Remove any courses without a distribution skill OR area
courses_raw <- courses_raw[!(courses_raw$areas == "[]" & courses_raw$skills == "[]"), ]
dim(courses_raw)
# Go row by row to remove duplicate course codes, only keeping the first code
courses_raw$code_check <- NA
for (i in 1:nrow(courses_raw)) {
matches <- regexpr("(?<=')[^']+", courses_raw$all_course_codes[i], perl = TRUE)
courses_raw$code_check[i] <- regmatches(courses_raw$all_course_codes[i], matches)
}
courses_raw <- courses_raw[courses_raw$course_code == courses_raw$code_check, ]
courses_clean <- courses_raw[ ,-ncol(courses_raw)]
# Drop columns that are no longer necessary
courses_clean <- subset(courses_clean, select = -c(all_course_codes, credits, school))
# Check the number of unique course numbers and course ids to know if they can be used for querying the reviews
length(unique(courses_clean$crn))
length(unique(courses_clean$course_id))
dim(courses_clean)
# Relabel all the areas for readability
for (i in 1:nrow(courses_clean)) {
clean_str <- gsub("\\[|\\]|'", "", courses_clean$areas[i])
if (courses_clean$areas[i] != "[]") {
courses_clean$areas[i] <- clean_str
}
else {
courses_clean$areas[i] <- NA
}
}
# Relabel all the skills for readability
for (i in 1:nrow(courses_clean)) {
clean_str <- gsub("\\[|\\]|'", "", courses_clean$skills[i])
if (courses_clean$skills[i] != "[]") {
courses_clean$skills[i] <- clean_str
}
else {
courses_clean$skills[i] <- NA
}
}
# Combine areas and skills for cleaning
courses_clean$area_skill <- paste(courses_clean$areas, courses_clean$skills, sep = "/")
# Reorder columns and drop unnecessary columns
raw_data2 <- raw_data2[, c(3, 4, 5, 6, 8, 12, 14)]
View(courses_clean)
knitr::opts_chunk$set(echo = TRUE)
courses_raw <- read.csv("courses.csv")
dim(courses_raw)
names(courses_raw)
# Should be the same since the json query already had this condition
courses_raw <- courses_raw[courses_raw$credits == 1.0, ]
dim(courses_raw)
# Remove any courses with NULL values
courses_raw <- courses_raw[complete.cases(courses_raw), ]
dim(courses_raw)
# Remove any courses without a distribution skill OR area
courses_raw <- courses_raw[!(courses_raw$areas == "[]" & courses_raw$skills == "[]"), ]
dim(courses_raw)
# Go row by row to remove duplicate course codes, only keeping the first code
courses_raw$code_check <- NA
for (i in 1:nrow(courses_raw)) {
matches <- regexpr("(?<=')[^']+", courses_raw$all_course_codes[i], perl = TRUE)
courses_raw$code_check[i] <- regmatches(courses_raw$all_course_codes[i], matches)
}
courses_raw <- courses_raw[courses_raw$course_code == courses_raw$code_check, ]
courses_clean <- courses_raw[ ,-ncol(courses_raw)]
# Drop columns that are no longer necessary
courses_clean <- subset(courses_clean, select = -c(all_course_codes, credits, school))
# Check the number of unique course numbers and course ids to know if they can be used for querying the reviews
length(unique(courses_clean$crn))
length(unique(courses_clean$course_id))
dim(courses_clean)
# Remove rows that have multiple skills or have a language skill
courses_clean <- courses_clean[nchar(courses_clean$areas) < 8, ]
courses_clean <- courses_clean[nchar(courses_clean$skills) < 8, ]
courses_clean <- courses_clean[courses_clean$skills != "['L1']", ]
courses_clean <- courses_clean[courses_clean$skills != "['L2']", ]
courses_clean <- courses_clean[courses_clean$skills != "['L3']", ]
courses_clean <- courses_clean[courses_clean$skills != "['L4']", ]
courses_clean <- courses_clean[courses_clean$skills != "['L5']", ]
# Relabel all the areas for readability
for (i in 1:nrow(courses_clean)) {
clean_str <- gsub("\\[|\\]|'", "", courses_clean$areas[i])
if (courses_clean$areas[i] != "[]") {
courses_clean$areas[i] <- clean_str
}
else {
courses_clean$areas[i] <- NA
}
}
# Relabel all the skills for readability
for (i in 1:nrow(courses_clean)) {
clean_str <- gsub("\\[|\\]|'", "", courses_clean$skills[i])
if (courses_clean$skills[i] != "[]") {
courses_clean$skills[i] <- clean_str
}
else {
courses_clean$skills[i] <- NA
}
}
# Combine areas and skills for cleaning
courses_clean$area_skill <- paste(courses_clean$areas, courses_clean$skills, sep = "/")
# Reorder columns and drop unnecessary columns
raw_data2 <- raw_data2[, c(3, 4, 5, 6, 8, 12, 14)]
View(courses_clean)
print(unique(courses_clean$area_skill))
courses_clean <- courses_clean[courses_clean$area_skill != "Sc/WR", ]
# Remove weird skill/area combo
courses_clean <- courses_clean[courses_clean$area_skill != "Sc/WR", ]
# Provide group labels for future analysis
courses_clean$Area <- NA
for (i in 1:nrow(courses_clean)) {
code <- courses_clean$area_skill[i]
if ((code == "Hu/NA") || (code == "NA/WR") || (code == "Hu/WR")) {
courses_clean$Area[i] <- "Humanities"
}
else if ((code == "Sc/NA") || (code == "NA/QR") || (code == "Sc/QR")) {
courses_clean$Area[i] <- "STEM"
}
else {
courses_clean$Area[i] <- "Social"
}
}
View(courses_clean)
# Remove weird skill/area combo
courses_clean <- courses_clean[courses_clean$area_skill != "Sc/WR", ]
# Provide group labels for future analysis
courses_clean$area <- NA
for (i in 1:nrow(courses_clean)) {
code <- courses_clean$area_skill[i]
if ((code == "Hu/NA") || (code == "NA/WR") || (code == "Hu/WR")) {
courses_clean$area[i] <- "Humanities"
}
else if ((code == "Sc/NA") || (code == "NA/QR") || (code == "Sc/QR")) {
courses_clean$area[i] <- "STEM"
}
else {
courses_clean$area[i] <- "Social"
}
}
View(courses_clean)
knitr::opts_chunk$set(echo = TRUE)
courses_raw <- read.csv("courses.csv")
dim(courses_raw)
names(courses_raw)
# Should be the same since the json query already had this condition
courses_raw <- courses_raw[courses_raw$credits == 1.0, ]
dim(courses_raw)
# Remove any courses with NULL values
courses_raw <- courses_raw[complete.cases(courses_raw), ]
dim(courses_raw)
# Remove any courses without a distribution skill OR area
courses_raw <- courses_raw[!(courses_raw$areas == "[]" & courses_raw$skills == "[]"), ]
dim(courses_raw)
# Go row by row to remove duplicate course codes, only keeping the first code
courses_raw$code_check <- NA
for (i in 1:nrow(courses_raw)) {
matches <- regexpr("(?<=')[^']+", courses_raw$all_course_codes[i], perl = TRUE)
courses_raw$code_check[i] <- regmatches(courses_raw$all_course_codes[i], matches)
}
courses_raw <- courses_raw[courses_raw$course_code == courses_raw$code_check, ]
courses_clean <- courses_raw[ ,-ncol(courses_raw)]
# Drop columns that are no longer necessary
courses_clean <- subset(courses_clean, select = -c(all_course_codes, credits, school)
)
# Check the number of unique course numbers and course ids to know if they can be used for querying the reviews
length(unique(courses_clean$crn))
length(unique(courses_clean$course_id))
dim(courses_clean)
# Remove rows that have multiple skills or have a language skill
courses_clean <- courses_clean[nchar(courses_clean$areas) < 8, ]
courses_clean <- courses_clean[nchar(courses_clean$skills) < 8, ]
courses_clean <- courses_clean[courses_clean$skills != "['L1']", ]
courses_clean <- courses_clean[courses_clean$skills != "['L2']", ]
courses_clean <- courses_clean[courses_clean$skills != "['L3']", ]
courses_clean <- courses_clean[courses_clean$skills != "['L4']", ]
courses_clean <- courses_clean[courses_clean$skills != "['L5']", ]
# Relabel all the areas for readability
for (i in 1:nrow(courses_clean)) {
clean_str <- gsub("\\[|\\]|'", "", courses_clean$areas[i])
if (courses_clean$areas[i] != "[]") {
courses_clean$areas[i] <- clean_str
}
else {
courses_clean$areas[i] <- NA
}
}
# Relabel all the skills for readability
for (i in 1:nrow(courses_clean)) {
clean_str <- gsub("\\[|\\]|'", "", courses_clean$skills[i])
if (courses_clean$skills[i] != "[]") {
courses_clean$skills[i] <- clean_str
}
else {
courses_clean$skills[i] <- NA
}
}
# Combine areas and skills into a new column
courses_clean$area_skill <- paste(courses_clean$areas, courses_clean$skills, sep = "/")
print(unique(courses_clean$area_skill))
# Remove weird skill/area combo
courses_clean <- courses_clean[courses_clean$area_skill != "Sc/WR", ]
# Provide group labels for future analysis
courses_clean$area <- NA
for (i in 1:nrow(courses_clean)) {
code <- courses_clean$area_skill[i]
if ((code == "Hu/NA") || (code == "NA/WR") || (code == "Hu/WR")) {
courses_clean$area[i] <- "Humanities"
}
else if ((code == "Sc/NA") || (code == "NA/QR") || (code == "Sc/QR")) {
courses_clean$area[i] <- "STEM"
}
else {
courses_clean$area[i] <- "Social"
}
}
# Drop columns that are no longer necessary
courses_clean <- subset(courses_clean, select = -c(area_skill, areas, skills))
# Reorder columns once more
raw_data4 <- raw_data3[, c(1, 2, 3, 8, 4, 5, 6, 7)]
View(courses_clean)
summary(courses_clean)
str(courses_clean)
# Check data frame structure
str(courses_clean)
print(courses_clean$professor_names)
# Check data frame structure
str(courses_clean)
head(courses_clean$professor_names, 20)
# Clean professor names
courses_clean$professor_names <- sapply(courses_clean$professor_names, function(x) {
x <- gsub("\\[|\\]|'", "", x)
})
View(courses_clean)
# Clean professor names
courses_clean$professor_names <- sapply(courses_clean$professor_names, function(x) {
x <- gsub("\\[|\\]|'|\"", "", x)
})
View(courses_clean)
courses_clean$average_rating <- round(courses_clean$average_rating, 3)
# Clean professor names
courses_clean$professor_names <- sapply(courses_clean$professor_names, function(x) {
x <- gsub("\\[|\\]|'|\"", "", x)
})
# Round ratings to three decimals
courses_clean$average_rating <- round(courses_clean$average_rating, 3)
courses_clean$average_professor <- round(courses_clean$average_professor, 3)
courses_clean$average_workload <- round(courses_clean$average_workload, 3)
courses_clean$average_rating_same_professors <- round(courses_clean$average_rating_same_professors, 3)
courses_clean$average_workload_same_professors <- round(courses_clean$average_workload_same_professors, 3)
View(courses_clean)
knitr::opts_chunk$set(echo = TRUE)
courses_raw <- read.csv("courses_raw.csv")
dim(courses_raw)
names(courses_raw)
# Should be the same since the json query already had this condition
courses_raw <- courses_raw[courses_raw$credits == 1.0, ]
dim(courses_raw)
# Remove any courses with NULL values
courses_raw <- courses_raw[complete.cases(courses_raw), ]
dim(courses_raw)
# Remove any courses without a distribution skill OR area
courses_raw <- courses_raw[!(courses_raw$areas == "[]" & courses_raw$skills == "[]"), ]
dim(courses_raw)
# Go row by row to remove duplicate course codes, only keeping the first code
courses_raw$code_check <- NA
for (i in 1:nrow(courses_raw)) {
matches <- regexpr("(?<=')[^']+", courses_raw$all_course_codes[i], perl = TRUE)
courses_raw$code_check[i] <- regmatches(courses_raw$all_course_codes[i], matches)
}
courses_raw <- courses_raw[courses_raw$course_code == courses_raw$code_check, ]
courses_clean <- courses_raw[ ,-ncol(courses_raw)]
# Drop columns that are no longer necessary
courses_clean <- subset(courses_clean, select = -c(all_course_codes, credits, school)
)
# Check the number of unique course numbers and course ids to know if they can be used for querying the reviews
length(unique(courses_clean$crn))
length(unique(courses_clean$course_id))
dim(courses_clean)
# Remove rows that have multiple skills or have a language skill
courses_clean <- courses_clean[nchar(courses_clean$areas) < 8, ]
courses_clean <- courses_clean[nchar(courses_clean$skills) < 8, ]
courses_clean <- courses_clean[courses_clean$skills != "['L1']", ]
courses_clean <- courses_clean[courses_clean$skills != "['L2']", ]
courses_clean <- courses_clean[courses_clean$skills != "['L3']", ]
courses_clean <- courses_clean[courses_clean$skills != "['L4']", ]
courses_clean <- courses_clean[courses_clean$skills != "['L5']", ]
# Relabel all the areas for readability
for (i in 1:nrow(courses_clean)) {
clean_str <- gsub("\\[|\\]|'", "", courses_clean$areas[i])
if (courses_clean$areas[i] != "[]") {
courses_clean$areas[i] <- clean_str
}
else {
courses_clean$areas[i] <- NA
}
}
# Relabel all the skills for readability
for (i in 1:nrow(courses_clean)) {
clean_str <- gsub("\\[|\\]|'", "", courses_clean$skills[i])
if (courses_clean$skills[i] != "[]") {
courses_clean$skills[i] <- clean_str
}
else {
courses_clean$skills[i] <- NA
}
}
# Combine areas and skills into a new column
courses_clean$area_skill <- paste(courses_clean$areas, courses_clean$skills, sep = "/")
print(unique(courses_clean$area_skill))
# Remove weird skill/area combo
courses_clean <- courses_clean[courses_clean$area_skill != "Sc/WR", ]
# Provide group labels for future analysis
courses_clean$area <- NA
for (i in 1:nrow(courses_clean)) {
code <- courses_clean$area_skill[i]
if ((code == "Hu/NA") || (code == "NA/WR") || (code == "Hu/WR")) {
courses_clean$area[i] <- "Humanities"
}
else if ((code == "Sc/NA") || (code == "NA/QR") || (code == "Sc/QR")) {
courses_clean$area[i] <- "STEM"
}
else {
courses_clean$area[i] <- "Social"
}
}
# Drop columns that are no longer necessary
courses_clean <- subset(courses_clean, select = -c(area_skill, areas, skills))
# Check data frame structure
str(courses_clean)
head(courses_clean$professor_names, 20)
# Clean professor names
courses_clean$professor_names <- sapply(courses_clean$professor_names, function(x) {
x <- gsub("\\[|\\]|'|\"", "", x)
})
# Round ratings to three decimals
courses_clean$average_rating <- round(courses_clean$average_rating, 3)
courses_clean$average_professor <- round(courses_clean$average_professor, 3)
courses_clean$average_workload <- round(courses_clean$average_workload, 3)
courses_clean$average_rating_same_professors <- round(courses_clean$average_rating_same_professors, 3)
courses_clean$average_workload_same_professors <- round(courses_clean$average_workload_same_professors, 3)
knitr::opts_chunk$set(echo = TRUE)
courses_raw <- read.csv("courses_raw.csv")
dim(courses_raw)
names(courses_raw)
# Should be the same since the json query already had this condition
courses_raw <- courses_raw[courses_raw$credits == 1.0, ]
dim(courses_raw)
# Remove any courses with NULL values
courses_raw <- courses_raw[complete.cases(courses_raw), ]
dim(courses_raw)
# Remove any courses without a distribution skill OR area
courses_raw <- courses_raw[!(courses_raw$areas == "[]" & courses_raw$skills == "[]"), ]
dim(courses_raw)
# Go row by row to remove duplicate course codes, only keeping the first code
courses_raw$code_check <- NA
for (i in 1:nrow(courses_raw)) {
matches <- regexpr("(?<=')[^']+", courses_raw$all_course_codes[i], perl = TRUE)
courses_raw$code_check[i] <- regmatches(courses_raw$all_course_codes[i], matches)
}
courses_raw <- courses_raw[courses_raw$course_code == courses_raw$code_check, ]
courses_clean <- courses_raw[ ,-ncol(courses_raw)]
# Drop columns that are no longer necessary
courses_clean <- subset(courses_clean, select = -c(all_course_codes, credits, school)
)
# Check the number of unique course numbers and course ids to know if they can be used for querying the reviews
length(unique(courses_clean$crn))
length(unique(courses_clean$course_id))
dim(courses_clean)
# Remove rows that have multiple skills or have a language skill
courses_clean <- courses_clean[nchar(courses_clean$areas) < 8, ]
courses_clean <- courses_clean[nchar(courses_clean$skills) < 8, ]
courses_clean <- courses_clean[courses_clean$skills != "['L1']", ]
courses_clean <- courses_clean[courses_clean$skills != "['L2']", ]
courses_clean <- courses_clean[courses_clean$skills != "['L3']", ]
courses_clean <- courses_clean[courses_clean$skills != "['L4']", ]
courses_clean <- courses_clean[courses_clean$skills != "['L5']", ]
# Relabel all the areas for readability
for (i in 1:nrow(courses_clean)) {
clean_str <- gsub("\\[|\\]|'", "", courses_clean$areas[i])
if (courses_clean$areas[i] != "[]") {
courses_clean$areas[i] <- clean_str
}
else {
courses_clean$areas[i] <- NA
}
}
# Relabel all the skills for readability
for (i in 1:nrow(courses_clean)) {
clean_str <- gsub("\\[|\\]|'", "", courses_clean$skills[i])
if (courses_clean$skills[i] != "[]") {
courses_clean$skills[i] <- clean_str
}
else {
courses_clean$skills[i] <- NA
}
}
# Combine areas and skills into a new column
courses_clean$area_skill <- paste(courses_clean$areas, courses_clean$skills, sep = "/")
print(unique(courses_clean$area_skill))
# Remove weird skill/area combo
courses_clean <- courses_clean[courses_clean$area_skill != "Sc/WR", ]
# Provide group labels for future analysis
courses_clean$area <- NA
for (i in 1:nrow(courses_clean)) {
code <- courses_clean$area_skill[i]
if ((code == "Hu/NA") || (code == "NA/WR") || (code == "Hu/WR")) {
courses_clean$area[i] <- "Humanities"
}
else if ((code == "Sc/NA") || (code == "NA/QR") || (code == "Sc/QR")) {
courses_clean$area[i] <- "STEM"
}
else {
courses_clean$area[i] <- "Social"
}
}
# Drop columns that are no longer necessary
courses_clean <- subset(courses_clean, select = -c(area_skill, areas, skills))
# Check data frame structure
str(courses_clean)
head(courses_clean$professor_names, 20)
# Clean professor names
courses_clean$professor_names <- sapply(courses_clean$professor_names, function(x) {
x <- gsub("\\[|\\]|'|\"", "", x)
})
# Round ratings to three decimals
courses_clean$average_rating <- round(courses_clean$average_rating, 3)
courses_clean$average_professor <- round(courses_clean$average_professor, 3)
courses_clean$average_workload <- round(courses_clean$average_workload, 3)
courses_clean$average_rating_same_professors <- round(courses_clean$average_rating_same_professors, 3)
courses_clean$average_workload_same_professors <- round(courses_clean$average_workload_same_professors, 3)
View(courses_clean)
print(unique(courses_clean$course_id))
print(unique(courses_clean$crn))
course_ids <- unique(courses_clean$course_id)
course_numbers <- unique(courses_clean$crn)
course_ids <- unique(courses_clean$course_id)
course_numbers <- unique(courses_clean$crn)
print(course_ids)
course_ids <- unique(courses_clean$course_id)
course_numbers <- unique(courses_clean$crn)
# Write these to a CSV file for my python script to access
write.csv(course_ids, 'course_ids.csv', row.names = FALSE)
write.csv(course_numbers, 'course_numbers.csv', row.names = FALSE)
