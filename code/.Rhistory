knitr::opts_chunk$set(echo = TRUE)
labeled_reviews <- read.csv("../data/reviews_labeled.csv")
View(labeled_reviews)
labeled_reviews <- read.csv("../data/reviews_labeled.csv")
summary(labeled_reviews)
View(labeled_reviews)
labeled_reviews <- read.csv("../data/reviews_labeled.csv")
positives <- sum(labeled_reviews$sentiment == "pos")
neutrals <- sum(labeled_reviews$sentiment == "neu")
negatives <- sum(labeled_reviews$sentiment == "neg")
length(labeled_reviews)
# Read the labeled training data and count the frequency of each sentiment
labeled_reviews <- read.csv("../data/reviews_labeled.csv")
positives <- sum(labeled_reviews$sentiment == "pos")
neutrals <- sum(labeled_reviews$sentiment == "neu")
negatives <- sum(labeled_reviews$sentiment == "neg")
print(sprintf("Positives Reviews: %.2f, Neutral Reviews: %.2f, Negative Reviews: %.2f, Total: %.2f"
, positives, neutrals, negatives, nrow(labeled_reviews)))
# Read the labeled training data and count the frequency of each sentiment
labeled_reviews <- read.csv("../data/reviews_labeled.csv")
positives <- sum(labeled_reviews$sentiment == "pos")
neutrals <- sum(labeled_reviews$sentiment == "neu")
negatives <- sum(labeled_reviews$sentiment == "neg")
print(sprintf("Positives Reviews: %d, Neutral Reviews: %d, Negative Reviews: %d, Total: %d"
, positives, neutrals, negatives, nrow(labeled_reviews)))
textblob <- read.csv("tblob.csv")
View(textblob)
View(textblob)
View(labeled_reviews)
install.packages("jsonlite")
library(jsonlite)
parsed_sentiment <- lapply(textblob$sentiment, function(cell) {
json_val <- gsub("'", "\"", cell)
fromJSON(json_val)
})
# Extract polarity and subjectivity
textblob$polarity <- sapply(parsed_sentiment, function(x) x$polarity)
textblob$subjectivity <- sapply(parsed_sentiment, function(x) x$subjectivity)
View(parsed_sentiment)
View(labeled_reviews)
parsed_sentiment <- lapply(textblob$sentiment, function(cell) {
json_val <- gsub("'", "\"", cell)
fromJSON(json_val)
})
# Extract polarity and subjectivity
textblob$polarity <- sapply(parsed_sentiment, function(x) x$polarity)
textblob$subjectivity <- sapply(parsed_sentiment, function(x) x$subjectivity)
View(textblob)
# Calculate a new sentiment score
textblob$sentiment_score <- textblob$polarity * (1 - textblob$subjectivity)
View(textblob)
# Calculate a new sentiment score
textblob$sentiment_score <- textblob$polarity * (1 - textblob$subjectivity)
plot(textblob(sentiment_score))
# Calculate a new sentiment score
textblob$sentiment_score <- textblob$polarity * (1 - textblob$subjectivity)
plot(textblob$sentiment_score)
# Calculate a new sentiment score
textblob$sentiment_score <- textblob$polarity * (1 - textblob$subjectivity)
boxplot(textblob$sentiment_score)
# Calculate a new sentiment score
textblob$sentiment_score <- textblob$polarity * (1 - textblob$subjectivity)
boxplot(textblob$sentiment_score, xlab = "Sentiment Score", main = "Boxplot of Textblob Scores")
# Calculate a new sentiment score
textblob$sentiment_score <- textblob$polarity * (1 - textblob$subjectivity)
boxplot(textblob$sentiment_score, ylab = "Sentiment Score", main = "Boxplot of Textblob Scores", col = "blue")
textblob$label <- ifelse(textblob$sentiment_score < -0.05, "neg",
ifelse(textblob$sentiment_score <= 0.1, "neu", "pos"))
View(textblob)
# Calculate a new sentiment score
textblob$sentiment_score <- textblob$polarity * (1 - textblob$subjectivity)
boxplot(textblob$sentiment_score, ylab = "Sentiment Score", main = "Boxplot of Textblob Scores", col = "blue")
textblob$label <- ifelse(textblob$sentiment_score < -0.05, "neg",
ifelse(textblob$sentiment_score < 0.05, "neu", "pos"))
View(textblob)
textblob$label <- ifelse(textblob$sentiment_score < -0.05, "neg",
ifelse(textblob$sentiment_score < 0.05, "neu", "pos"))
textblob$true_label <- labeled_reviews$sentiment
View(textblob)
textblob$label <- ifelse(textblob$sentiment_score < -0.05, "neg",
ifelse(textblob$sentiment_score < 0.05, "neu", "pos"))
textblob$true_label <- labeled_reviews$sentiment
textblob$correct <- textblob$label == textblob$true_label
View(textblob)
textblob$label <- ifelse(textblob$sentiment_score < -0.05, "neg",
ifelse(textblob$sentiment_score < 0.05, "neu", "pos"))
textblob$true_label <- labeled_reviews$sentiment
textblob$correct <- textblob$label == textblob$true_label
accuracy <- (sum(textblob$correct) / length(textblob$correct)) * 100
textblob$label <- ifelse(textblob$sentiment_score < -0.05, "neg",
ifelse(textblob$sentiment_score < 0.05, "neu", "pos"))
textblob$true_label <- labeled_reviews$sentiment
textblob$correct <- textblob$label == textblob$true_label
accuracy <- (sum(textblob$correct) / length(textblob$correct)) * 100
print(accuracy)
# Calculate a new sentiment score
textblob$sentiment_score <- textblob$polarity # * (1 - textblob$subjectivity)
boxplot(textblob$sentiment_score, ylab = "Sentiment Score", main = "Boxplot of Textblob Scores", col = "blue")
textblob$label <- ifelse(textblob$sentiment_score < -0.05, "neg",
ifelse(textblob$sentiment_score < 0.05, "neu", "pos"))
textblob$true_label <- labeled_reviews$sentiment
textblob$correct <- textblob$label == textblob$true_label
accuracy <- (sum(textblob$correct) / length(textblob$correct)) * 100
print(accuracy)
vader <- read.csv("vader.csv")
View(vader)
View(vader)
vader$sentiment_score <- sapply(vader$sentiment, function(x) {
# Parse the JSON-like string
parsed <- fromJSON(x)
# Extract the 'compound' value
return(parsed$compound)
})
View(vader)
View(vader)
vader$sentiment_score <- sapply(vader$sentiment, function(x) {
corrected_json <- gsub("'", "\"", x)
parsed <- fromJSON(corrected_json)
return(parsed$compound)
})
View(vader)
vader$sentiment_score <- sapply(vader$sentiment, function(x) {
corrected_json <- gsub("'", "\"", x)
parsed <- fromJSON(corrected_json)
return(parsed$compound)
})
boxplot(vader$sentiment_score, ylab = "Sentiment Score", main = "Boxplot of VADER Scores", col = "red")
vader$label <- ifelse(vader$sentiment_score < -0.05, "neg",
ifelse(vader$sentiment_score < 0.05, "neu", "pos"))
View(vader)
vader$label <- ifelse(vader$sentiment_score < -0.05, "neg",
ifelse(vader$sentiment_score < 0.05, "neu", "pos"))
vader$true_label <- labeled_reviews$sentiment
vader$correct <- vader$label == vader$true_label
accuracy_vader <- (sum(vader$correct) / length(vader$correct)) * 100
print(accuracy_vader)
vader$label <- ifelse(vader$sentiment_score < -0.05, "neg",
ifelse(vader$sentiment_score < 0.10, "neu", "pos"))
vader$true_label <- labeled_reviews$sentiment
vader$correct <- vader$label == vader$true_label
accuracy_vader <- (sum(vader$correct) / length(vader$correct)) * 100
print(accuracy_vader)
vader$label <- ifelse(vader$sentiment_score < -0.05, "neg",
ifelse(vader$sentiment_score < 0.30, "neu", "pos"))
vader$true_label <- labeled_reviews$sentiment
vader$correct <- vader$label == vader$true_label
accuracy_vader <- (sum(vader$correct) / length(vader$correct)) * 100
print(accuracy_vader)
vader$label <- ifelse(vader$sentiment_score < -0.05, "neg",
ifelse(vader$sentiment_score < 0.40, "neu", "pos"))
vader$true_label <- labeled_reviews$sentiment
vader$correct <- vader$label == vader$true_label
accuracy_vader <- (sum(vader$correct) / length(vader$correct)) * 100
print(accuracy_vader)
vader$label <- ifelse(vader$sentiment_score < -0.05, "neg",
ifelse(vader$sentiment_score < 1, "neu", "pos"))
vader$true_label <- labeled_reviews$sentiment
vader$correct <- vader$label == vader$true_label
accuracy_vader <- (sum(vader$correct) / length(vader$correct)) * 100
print(accuracy_vader)
vader$label <- ifelse(vader$sentiment_score < -0.1, "neg",
ifelse(vader$sentiment_score < 0.1, "neu", "pos"))
vader$true_label <- labeled_reviews$sentiment
vader$correct <- vader$label == vader$true_label
accuracy_vader <- (sum(vader$correct) / length(vader$correct)) * 100
print(accuracy_vader)
roberta <- read.csv("roberta.csv")
View(roberta)
get_sentiment_label <- function(probabilities) {
labels <- c("neg", "neu", "pos")
max_prob_index <- which.max(probabilities)
return(labels[max_prob_index])
}
roberta$sentiment_score <- sapply(roberta$sentiment, get_sentiment_label)
View(roberta)
View(roberta)
convert_to_numeric_vector <- function(x) {
nums <- gsub("\\[|\\]", "", x)
num_vec <- as.numeric(unlist(strsplit(nums, ",\\s*")))
return(num_vec)
}
roberta$sentiment <- lapply(roberta$sentiment, convert_to_numeric_vector)
get_sentiment_label <- function(probabilities) {
labels <- c("neg", "neu", "pos")
max_prob_index <- which.max(probabilities)
return(labels[max_prob_index])
}
roberta$sentiment_score <- sapply(roberta$sentiment, get_sentiment_label)
View(roberta)
convert_to_numeric_vector <- function(x) {
nums <- gsub("\\[|\\]", "", x)
num_vec <- as.numeric(unlist(strsplit(nums, ",\\s*")))
return(num_vec)
}
roberta$sentiment <- lapply(roberta$sentiment, convert_to_numeric_vector)
get_sentiment_label <- function(probabilities) {
labels <- c("neg", "neu", "pos")
max_prob_index <- which.max(probabilities)
return(labels[max_prob_index])
}
roberta$sentiment_score <- sapply(roberta$sentiment, get_sentiment_label)
boxplot(roberta$sentiment_score, ylab = "Sentiment Score", main = "Boxplot of VADER Scores", col = "red")
convert_to_numeric_vector <- function(x) {
nums <- gsub("\\[|\\]", "", x)
num_vec <- as.numeric(unlist(strsplit(nums, ",\\s*")))
return(num_vec)
}
roberta$sentiment <- lapply(roberta$sentiment, convert_to_numeric_vector)
get_sentiment_label <- function(probabilities) {
labels <- c("neg", "neu", "pos")
max_prob_index <- which.max(probabilities)
return(labels[max_prob_index])
}
roberta$label <- sapply(roberta$sentiment, get_sentiment_label)
View(roberta)
roberta$true_label <- labeled_reviews$sentiment
roberta$correct <- roberta$label == roberta$true_label
accuracy_roberta <- (sum(roberta$correct) / length(roberta$correct)) * 100
print(accuracy_roberta)
View(roberta)
